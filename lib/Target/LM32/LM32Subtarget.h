//=====-- Mico32Subtarget.h - Define Subtarget for the Mico32 --*- C++ -*--====//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Mico32 specific subclass of TargetSubtarget.
//
//===----------------------------------------------------------------------===//

#ifndef MICO32SUBTARGET_H
#define MICO32SUBTARGET_H

#include "llvm/Target/TargetSubtargetInfo.h"
#include "llvm/MC/MCInstrItineraries.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "Mico32GenSubtargetInfo.inc"


namespace llvm {
class StringRef;

class Mico32Subtarget : public Mico32GenSubtargetInfo {
protected:
  // Is the barrel shifter present? 
  bool HasBarrel;

  // Are (undocumented) signed division 0x27 /modulo 0x35 instructions enabled.
  bool HasSDIV;

  // Are unsigned division/modulo instructions enabled.
  bool HasDIV;

  // Are multiply instructions enabled.
  bool HasMUL;

  // If true, SP points to first unused 32 bit word (the official ABI)
  // otherwise SP points to the last used word.
  bool HasSPBias;

  // Selected instruction itineraries (one entry per itinerary class.)
  // Used by Mico32GenSubtarget.inc.
  InstrItineraryData InstrItins;

public:

  /// This constructor initializes the data members to match that
  /// of the specified triple.
  Mico32Subtarget(const std::string &TT, const std::string &CPU,
                  const std::string &FS);
  
  /// ParseSubtargetFeatures - Parses features string setting specified 
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool hasBarrel()  const { return HasBarrel; };
  bool hasSDIV()    const { return HasSDIV; };
  bool hasDIV()     const { return HasDIV; };
  bool hasMUL()     const { return HasMUL; };
  bool hasSPBias()  const { return HasSPBias; };

};

} // End llvm namespace

#endif
